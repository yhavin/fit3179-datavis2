x <- 1:10
x <- [1:10]
X <- c(1, 2)
Y <- c(3, 4)
X * Y
plot(nrfid)
# Activity 8
library(igraph)
library(igraphdata)
data(rfid)
nrfid = rfid
nrfid = simplify(nrfid, remove.multiple=TRUE, remove.loops=TRUE, edge.attr.comb=getIgraphOpt("edge.attr.comb"))
plot(nrfid)
degree = as.table(degree(nrfid))
betweenness = as.table(betweenness(nrfid))
closeness = as.table(closeness(nrfid))
eigen = as.table(evcent(nrfid)$vector)
averagePath = average.path.length(nrfid)
diameter = diameter(nrfid)
T.nrfid = as.data.frame(rbind(degree, betweenness, closeness, eigen))
T.nrfid = as.data.frame(t(T.nrfid))
View(T.nrfid)
print(T.nrfid[order(-betweenness), ])
print(T.nrfid[order(-degree), ])
print(T.nrfid[order(-closeness), ])
print(T.nrfid[order(-eigen), ])
rm(list=ls())
# Activity 9
set.seed(9)
gg = graph_from_literal(1:2:4--1:2:4)
plot(gg)
hh = graph_from_literal(1:2:3--1:2:3)
gg = gg %u% hh
plot(gg)
# Pre-tutorial
library(ggplot2)
attach(diamonds)
D = diamonds
View(D)
price_level = ifelse(D$price >= median(D$price), "High", "Low")
D = cbind(D, as.factor(price_level))
colnames(D)[11] = "price_level"
set.seed(9999)
train.row = sample(1:nrow(D), 0.7*nrow(D))
train = D[train.row, ]
test = D[test.row, ]
test = D[-train.row, ]
library(tree)
fit = tree(price_level ~ . -price, data=train)
summary(fit)
View(D)
plot(fit)
text(fit, pretty=0)
?text
predict = predict(fit, test, type="class")
table(actual = D$price_level, predicted=predict)
table(actual = test$price_level, predicted=predict)
cvtest = cv.tree(fit, FUN=prune.misclass)
cvtest
pruned.fit = prune.misclass(fit, best=4)
summary(pruned.fit)
plot(pruned.fit)
text(pruned.fit, pretty=0)
predict = predict(pruned.fit, test, type="class")
table(actual=test$price_level, predicted=predict)
library(ROCR)
install.packages("ROCR")
library(ROCR)
predict = predict(pruned.fit, test, type="vector")
View(predict)
pred = prediction(pred[, 2], test$price_level)
pred = prediction(predict[, 2], test$price_level)
perf = performance(pred, "tpr", "fpr")
plot(perf)
abline(0, 1)
dlift = performance(pred, "lift")
plot(dlift)
rm(list=ls())
# Binomial
# Q8
?pbinom()
# Binomial
# Q8
pbinom(10, 5, lower.tail=F)
# Binomial
# Q8
pbinom(10, 5, 0.5, lower.tail=F)
# Binomial
# Q8
pbinom(5, 10, 0.5, lower.tail=F)
# Gaussian
# Q1
?pnorm
# Gaussian
# Q1
pnorm(2, 0, 1, lower.tail=F)
pnorm(2, 0, 4, lower.tail=F)
# Q3
pnorm(0.5, 0, 1)
pnorm(1.75, 0, 1)
pnorm(1, 0, 1) - (1 - pnorm(0.25, 0, 1)
pnorm(1, 0, 1) - (1 - pnorm(0.25, 0, 1))
pnorm(1, 0, 1)
1 - pnorm(0.25, 0, 1)
a - b
a = pnorm(1, 0, 1)
b = 1 - pnorm(0.25, 0, 1)
a - b
return ((rate^k) * exp(-rate)) / factorial(k)
return ((rate^k) * exp(rate * -1)) / factorial(k)
return(((rate^k) * exp(rate * -1)) / factorial(k))
poission(1, 4)
poisson(1, 4)
return(((rate ^ k) * exp(rate * -1)) / factorial(k))
return(((r ^ k) * exp(r * -1)) / factorial(k))
return(result)
# Poisson
# Q2
poisson <- function(k, rate) {
result = ((rate ^ k) * exp(-rate)) / factorial(k)
return(result)
}
poisson(1, 4)
poisson(2, 4)
poisson(0, 4) + poisson(1, 4)
?dpois
# Q3
dpois(1, 4)
dpois(2, 4)
ppois(2, 4)
ppois(1, 4)
1 - ppois(4, 4)
1 - ppois(5, 4)
# Q5
ppois(2, 5)
# Q5
ppois(2, 6)
ppois(1, 6/7)
dpois(1, 6/7)
1 - ppois(1, 6/7)
1 - ppois(0, 6/7)
mu[i] = mean(x[1:i])
runningmean(3:10)
# Q6.1 Running mean
runningmean <- function(x)
{
mu = vector(mode = "numeric", length = length(x))
for(i in 1:length(x)) {
mu[i] = mean(x[1:i])
}
return(mu)
}
runningmean(3:10)
runningmean(c(5, 8, 1, 5, 7, 3, 8))
x = rnorm(1000, 0, 1)
# Generate data and plot
plot(1:1000,runningmean(x), type="l", col="red")
# Use "lines" to add new lines to an existing plot ...
lines(1:1000, runningmean(x), col = "green")
lines(1:1000, runningmean(x), col = "blue")
plot(0)
lines(0, type = "l")
# Generate data and plot
plot(1:1000,runningmean(x), type="l", col="red")
lines(0, type = "l")
lines(1:1000, 0, type = "l")
lines(1:1000, 0:0, type = "l")
lines(0, 1:1000, type = "l")
# Q6.3
# Do the same for binomial data -- you should use the ylim=c(0,1) option
a = rbinom(1000, 1, 0.75)
# Q6.3
# Do the same for binomial data -- you should use the ylim=c(0,1) option
a = rbinom(1000, 1, 0.5)
b = rbinom(1000, 1, 0.9)
# to set the yaxis to be from 0 to 1 (i.e. the complete parameter space of the binomial)
lines(1:1000, a, col="orange", ylim=c(0,1))
# to set the yaxis to be from 0 to 1 (i.e. the complete parameter space of the binomial)
plot(1:1000, a, col="orange", ylim=c(0,1))
# to set the yaxis to be from 0 to 1 (i.e. the complete parameter space of the binomial)
plot(a, col="orange", ylim=c(0,1))
theta.0 = 0.5
## Question 3
# 3.2
theta.hat = 11/15
z = (theta.hat - 0.5) / sqrt((0.5 * (1 - 0.5)) / 240)
p = 2 * pnorm(-abs(z))
setwd("~/Documents/Monash University/2022 S2/FIT3179 Data visualisation/Assignments/Data visualisation 2/Project/data")
camp = read.csv("nationalParkCamping2.csv")
View(camp)
library(tidry)
library(tidyr)
pivot_longer(camp, names_to=c("Tent", "RV", "Backcountry"), names_sep=", ")
pivot_longer(camp, cols=c("Tent.Campers", "RV.Campers", "Backcountry.Campers"), names_to=c("Tent", "RV", "Backcountry"), names_sep=", ")
long = pivot_longer(camp, cols=c("Tent.Campers", "RV.Campers", "Backcountry.Campers"), names_to=c("Tent", "RV", "Backcountry"), names_sep=", ")
View(long)
long = pivot_longer(camp, cols=c("Tent.Campers", "RV.Campers", "Backcountry.Campers"), names_to="Camping Type)
View(long)
View(long)
long = pivot_longer(camp, cols=c("Tent.Campers", "RV.Campers", "Backcountry.Campers"), names_to="Camping Type")
long = pivot_longer(camp, cols=c("Tent.Campers", "RV.Campers", "Backcountry.Campers"), names_to="Camping Type")
View(long)
write.csv(long, "nationalParkCamping3.csv")
